package domain;import data.*;import display.FrontCommand;import java.util.*;import java.io.IOException;import java.text.SimpleDateFormat;import javax.servlet.ServletException;import javax.servlet.http.HttpSession;/** * Controla el evento de pedido de factura * @author Luis Roldan Chacon * @author Gilberth Arce Hernandez */public class TicketsInvoice extends FrontCommand{	public int codigoEvento;	public void process() throws ServletException, IOException	{		try		{			int codigoTiquete = Integer.parseInt(request.getParameter("code"));			String codigoCliente = setTicket(codigoTiquete);			setCustomer(codigoCliente);			setNumberedLocation(codigoTiquete);			setEvent();			setLinkVolver();			forward("/ticketsInvoice.jsp");		}		catch(Exception e)		{			request.setAttribute("error", e.getMessage());			forward("/error.jsp");		}	}		public void setLinkVolver() throws Exception	{		String codigoEvento = request.getParameter("codigoEvento");		String linkRegresar = "/tickets/domain.EventsListAll";				if(codigoEvento != null)		{			linkRegresar = "/tickets/domain.EventsDetail?code=" + codigoEvento;		}				request.setAttribute("link", linkRegresar);	}		public void setEvent() throws Exception	{		EventFinder events = (EventFinder)context.getBean("EventFinder");		EventRowGateway event = events.find(this.codigoEvento);		Map param = new HashMap();		param.put("code", event.getCode());		param.put("eventType", event.getEventType());		param.put("name", event.getName());		param.put("artists", event.getArtists());		param.put("date", event.getDate());		param.put("place", event.getPlace());		request.setAttribute("event", param);	}		public void setCustomer(String codigoCliente) throws Exception	{		CustomerFinder customers = (CustomerFinder)context.getBean("CustomerFinder");		CustomerRowGateway customer = customers.find(codigoCliente);				Map params = new HashMap();		params.put("id", customer.getId());		params.put("name", customer.getName());		params.put("address", customer.getAddress());		params.put("telephone", customer.getTelephone());		params.put("cardNumber", customer.getCardNumber());		params.put("cardType", customer.getCardType());				request.setAttribute("customer", params);	}		public String setTicket(int codigoTiquete) throws Exception	{		TicketFinder ticketFinder = (TicketFinder)context.getBean("TicketFinder");		TicketRowGateway ticket = ticketFinder.find(codigoTiquete);				Map params = new HashMap();		params.put("code", ticket.getCode());		params.put("locationType", ticket.getLocationType());		params.put("event", ticket.getEvent());		params.put("date", ticket.getDate());		params.put("quantity", ticket.getQuantity());		params.put("amount", ticket.getAmount());		request.setAttribute("ticket", params);		this.codigoEvento = ticket.getEvent();		return ticket.getCustomer();	}		public void setNumberedLocation(int codigoTiquete) throws Exception	{		HashMap param;		List<HashMap> params = new ArrayList<HashMap>();		NumberedLocationFinder numberedLocationFinder = (NumberedLocationFinder)context.getBean("NumberedLocationFinder");		List<NumberedLocationRowGateway> numberedLocations = numberedLocationFinder.findByTicketId(codigoTiquete);		for (NumberedLocationRowGateway numberedLocation : numberedLocations)		{			param = new HashMap();			param.put("locationNumber", numberedLocation.getLocationNumber());			param.put("ticketId", numberedLocation.getTicketId());			params.add(param);		}		request.setAttribute("numberedLocations", params);	}}